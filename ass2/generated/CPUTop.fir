;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    reg PCReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 14:28]
    wire runStopLogic : UInt<1>
    runStopLogic <= UInt<1>("h00")
    node _T = not(io.run) @[ProgramCounter.scala 17:29]
    node _T_1 = or(io.stop, _T) @[ProgramCounter.scala 17:27]
    runStopLogic <= _T_1 @[ProgramCounter.scala 17:16]
    when runStopLogic : @[ProgramCounter.scala 20:23]
      PCReg <= PCReg @[ProgramCounter.scala 21:11]
      skip @[ProgramCounter.scala 20:23]
    else : @[ProgramCounter.scala 22:25]
      when io.jump : @[ProgramCounter.scala 22:25]
        PCReg <= io.programCounterJump @[ProgramCounter.scala 23:11]
        skip @[ProgramCounter.scala 22:25]
      else : @[ProgramCounter.scala 24:16]
        node _T_2 = add(PCReg, UInt<1>("h01")) @[ProgramCounter.scala 25:20]
        node _T_3 = tail(_T_2, 1) @[ProgramCounter.scala 25:20]
        PCReg <= _T_3 @[ProgramCounter.scala 25:11]
        skip @[ProgramCounter.scala 24:16]
    io.programCounter <= PCReg @[ProgramCounter.scala 29:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<4>, flip bSel : UInt<4>, flip writeData : UInt<32>, flip writeSel : UInt<4>, flip writeEnable : UInt<1>, a : UInt<32>, b : UInt<32>}
    
    io.a <= UInt<1>("h00") @[RegisterFile.scala 16:8]
    io.b <= UInt<1>("h00") @[RegisterFile.scala 17:8]
    wire _T : UInt<32>[16] @[RegisterFile.scala 20:45]
    _T[0] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[1] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[2] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[3] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[4] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[5] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[6] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[7] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[8] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[9] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[10] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[11] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[12] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[13] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[14] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    _T[15] <= UInt<32>("h00") @[RegisterFile.scala 20:45]
    reg registers : UInt<32>[16], clock with : (reset => (reset, _T)) @[RegisterFile.scala 20:37]
    when io.writeEnable : @[RegisterFile.scala 23:25]
      registers[io.writeSel] <= io.writeData @[RegisterFile.scala 24:28]
      skip @[RegisterFile.scala 23:25]
    io.a <= registers[io.aSel] @[RegisterFile.scala 28:8]
    io.b <= registers[io.bSel] @[RegisterFile.scala 29:8]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<8>, regWrite : UInt<1>, dataWrite : UInt<1>, aluSel : UInt<4>, memRegWrite : UInt<1>, immediateOp : UInt<1>, immediateAddr : UInt<1>, immediateRegWrite : UInt<1>, writeSelI : UInt<1>, done : UInt<1>}
    
    io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 19:15]
    io.dataWrite <= UInt<1>("h00") @[ControlUnit.scala 20:16]
    io.aluSel <= UInt<1>("h00") @[ControlUnit.scala 21:13]
    io.memRegWrite <= UInt<1>("h00") @[ControlUnit.scala 22:18]
    io.immediateOp <= UInt<1>("h00") @[ControlUnit.scala 23:18]
    io.immediateAddr <= UInt<1>("h00") @[ControlUnit.scala 24:20]
    io.immediateRegWrite <= UInt<1>("h00") @[ControlUnit.scala 25:24]
    io.writeSelI <= UInt<1>("h00") @[ControlUnit.scala 26:16]
    io.done <= UInt<1>("h00") @[ControlUnit.scala 27:11]
    node _T = bits(io.opcode, 7, 6) @[ControlUnit.scala 30:20]
    node _T_1 = eq(UInt<1>("h00"), _T) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      node _T_2 = bits(io.opcode, 5, 4) @[ControlUnit.scala 34:24]
      node _T_3 = eq(UInt<1>("h00"), _T_2) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 40:58]
        node _T_4 = bits(io.opcode, 3, 0) @[ControlUnit.scala 37:33]
        io.aluSel <= _T_4 @[ControlUnit.scala 37:21]
        io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 38:23]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<1>("h01"), _T_2) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 42:23]
          io.memRegWrite <= UInt<1>("h01") @[ControlUnit.scala 43:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<2>("h02"), _T_2) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            io.dataWrite <= UInt<1>("h01") @[ControlUnit.scala 47:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_7 = eq(UInt<2>("h03"), _T_2) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              skip @[Conditional.scala 39:67]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_8 = eq(UInt<1>("h01"), _T) @[Conditional.scala 37:30]
      when _T_8 : @[Conditional.scala 39:67]
        io.writeSelI <= UInt<1>("h01") @[ControlUnit.scala 57:20]
        node _T_9 = bits(io.opcode, 5, 4) @[ControlUnit.scala 59:24]
        node _T_10 = eq(UInt<1>("h00"), _T_9) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 40:58]
          node _T_11 = bits(io.opcode, 3, 0) @[ControlUnit.scala 62:33]
          io.aluSel <= _T_11 @[ControlUnit.scala 62:21]
          io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 63:23]
          io.immediateOp <= UInt<1>("h01") @[ControlUnit.scala 64:26]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<1>("h01"), _T_9) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 68:23]
            io.immediateRegWrite <= UInt<1>("h01") @[ControlUnit.scala 69:32]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_13 = eq(UInt<2>("h02"), _T_9) @[Conditional.scala 37:30]
            when _T_13 : @[Conditional.scala 39:67]
              io.immediateAddr <= UInt<1>("h01") @[ControlUnit.scala 73:28]
              io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 74:23]
              io.memRegWrite <= UInt<1>("h01") @[ControlUnit.scala 75:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<2>("h03"), _T_9) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                io.immediateAddr <= UInt<1>("h01") @[ControlUnit.scala 79:28]
                io.dataWrite <= UInt<1>("h01") @[ControlUnit.scala 80:24]
                skip @[Conditional.scala 39:67]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<2>("h02"), _T) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          node _T_16 = bits(io.opcode, 3, 0) @[ControlUnit.scala 87:29]
          io.aluSel <= _T_16 @[ControlUnit.scala 87:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_17 = eq(UInt<2>("h03"), _T) @[Conditional.scala 37:30]
          when _T_17 : @[Conditional.scala 39:67]
            io.done <= UInt<1>("h01") @[ControlUnit.scala 92:15]
            skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip op1 : UInt<32>, flip op2 : UInt<32>, flip sel : UInt<4>, result : UInt<32>, cmpResult : UInt<1>}
    
    io.result <= UInt<1>("h00") @[ALU.scala 14:13]
    io.cmpResult <= UInt<1>("h00") @[ALU.scala 15:16]
    node _T = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.op1, io.op2) @[ALU.scala 19:36]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 19:36]
      io.result <= _T_2 @[ALU.scala 19:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = sub(io.op1, io.op2) @[ALU.scala 20:36]
        node _T_5 = tail(_T_4, 1) @[ALU.scala 20:36]
        io.result <= _T_5 @[ALU.scala 20:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<2>("h02"), io.sel) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _T_7 = mul(io.op1, io.op2) @[ALU.scala 21:36]
          io.result <= _T_7 @[ALU.scala 21:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), io.sel) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = add(io.op1, UInt<1>("h01")) @[ALU.scala 22:36]
            node _T_10 = tail(_T_9, 1) @[ALU.scala 22:36]
            io.result <= _T_10 @[ALU.scala 22:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_11 = eq(UInt<3>("h04"), io.sel) @[Conditional.scala 37:30]
            when _T_11 : @[Conditional.scala 39:67]
              node _T_12 = sub(io.op1, UInt<1>("h01")) @[ALU.scala 23:36]
              node _T_13 = tail(_T_12, 1) @[ALU.scala 23:36]
              io.result <= _T_13 @[ALU.scala 23:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h05"), io.sel) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = not(io.op1) @[ALU.scala 24:29]
                io.result <= _T_15 @[ALU.scala 24:26]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_16 = eq(UInt<3>("h06"), io.sel) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = and(io.op1, io.op2) @[ALU.scala 25:36]
                  io.result <= _T_17 @[ALU.scala 25:26]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_18 = eq(UInt<3>("h07"), io.sel) @[Conditional.scala 37:30]
                  when _T_18 : @[Conditional.scala 39:67]
                    node _T_19 = or(io.op1, io.op2) @[ALU.scala 26:36]
                    io.result <= _T_19 @[ALU.scala 26:26]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_20 = eq(UInt<4>("h08"), io.sel) @[Conditional.scala 37:30]
                    when _T_20 : @[Conditional.scala 39:67]
                      node _T_21 = xor(io.op1, io.op2) @[ALU.scala 27:36]
                      io.result <= _T_21 @[ALU.scala 27:26]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_22 = eq(UInt<4>("h09"), io.sel) @[Conditional.scala 37:30]
                      when _T_22 : @[Conditional.scala 39:67]
                        node _T_23 = eq(io.op1, io.op2) @[ALU.scala 30:39]
                        io.cmpResult <= _T_23 @[ALU.scala 30:29]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_24 = eq(UInt<4>("h0a"), io.sel) @[Conditional.scala 37:30]
                        when _T_24 : @[Conditional.scala 39:67]
                          node _T_25 = neq(io.op1, io.op2) @[ALU.scala 31:40]
                          io.cmpResult <= _T_25 @[ALU.scala 31:30]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_26 = eq(UInt<4>("h0b"), io.sel) @[Conditional.scala 37:30]
                          when _T_26 : @[Conditional.scala 39:67]
                            node _T_27 = gt(io.op1, io.op2) @[ALU.scala 32:40]
                            io.cmpResult <= _T_27 @[ALU.scala 32:30]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_28 = eq(UInt<4>("h0c"), io.sel) @[Conditional.scala 37:30]
                            when _T_28 : @[Conditional.scala 39:67]
                              node _T_29 = geq(io.op1, io.op2) @[ALU.scala 33:40]
                              io.cmpResult <= _T_29 @[ALU.scala 33:30]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_30 = eq(UInt<4>("h0d"), io.sel) @[Conditional.scala 37:30]
                              when _T_30 : @[Conditional.scala 39:67]
                                node _T_31 = lt(io.op1, io.op2) @[ALU.scala 34:40]
                                io.cmpResult <= _T_31 @[ALU.scala 34:30]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_32 = eq(UInt<4>("h0e"), io.sel) @[Conditional.scala 37:30]
                                when _T_32 : @[Conditional.scala 39:67]
                                  node _T_33 = leq(io.op1, io.op2) @[ALU.scala 35:40]
                                  io.cmpResult <= _T_33 @[ALU.scala 35:30]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_34 = eq(UInt<4>("h0f"), io.sel) @[Conditional.scala 37:30]
                                  when _T_34 : @[Conditional.scala 39:67]
                                    io.cmpResult <= UInt<1>("h01") @[ALU.scala 36:30]
                                    skip @[Conditional.scala 39:67]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    io.done <= controlUnit.io.done @[CPUTop.scala 32:11]
    node _T = bits(programMemory.io.instructionRead, 31, 24) @[CPUTop.scala 35:60]
    controlUnit.io.opcode <= _T @[CPUTop.scala 35:25]
    programCounter.io.run <= io.run @[CPUTop.scala 38:25]
    programCounter.io.stop <= controlUnit.io.done @[CPUTop.scala 39:26]
    programCounter.io.jump <= alu.io.cmpResult @[CPUTop.scala 40:26]
    node _T_1 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 41:75]
    programCounter.io.programCounterJump <= _T_1 @[CPUTop.scala 41:40]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 44:28]
    registerFile.io.writeEnable <= controlUnit.io.regWrite @[CPUTop.scala 47:31]
    node _T_2 = bits(programMemory.io.instructionRead, 23, 20) @[CPUTop.scala 48:59]
    registerFile.io.aSel <= _T_2 @[CPUTop.scala 48:24]
    node _T_3 = bits(programMemory.io.instructionRead, 19, 16) @[CPUTop.scala 49:59]
    registerFile.io.bSel <= _T_3 @[CPUTop.scala 49:24]
    when controlUnit.io.writeSelI : @[CPUTop.scala 50:35]
      node _T_4 = bits(programMemory.io.instructionRead, 19, 16) @[CPUTop.scala 51:65]
      registerFile.io.writeSel <= _T_4 @[CPUTop.scala 51:30]
      skip @[CPUTop.scala 50:35]
    else : @[CPUTop.scala 52:16]
      node _T_5 = bits(programMemory.io.instructionRead, 15, 12) @[CPUTop.scala 53:65]
      registerFile.io.writeSel <= _T_5 @[CPUTop.scala 53:30]
      skip @[CPUTop.scala 52:16]
    when controlUnit.io.immediateRegWrite : @[CPUTop.scala 55:43]
      node _T_6 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 56:66]
      registerFile.io.writeData <= _T_6 @[CPUTop.scala 56:31]
      skip @[CPUTop.scala 55:43]
    else : @[CPUTop.scala 57:44]
      when controlUnit.io.memRegWrite : @[CPUTop.scala 57:44]
        registerFile.io.writeData <= dataMemory.io.dataRead @[CPUTop.scala 58:31]
        skip @[CPUTop.scala 57:44]
      else : @[CPUTop.scala 59:16]
        registerFile.io.writeData <= alu.io.result @[CPUTop.scala 60:31]
        skip @[CPUTop.scala 59:16]
    alu.io.op1 <= registerFile.io.a @[CPUTop.scala 64:14]
    when controlUnit.io.immediateOp : @[CPUTop.scala 65:37]
      node _T_7 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 66:51]
      alu.io.op2 <= _T_7 @[CPUTop.scala 66:16]
      skip @[CPUTop.scala 65:37]
    else : @[CPUTop.scala 67:16]
      alu.io.op2 <= registerFile.io.b @[CPUTop.scala 68:16]
      skip @[CPUTop.scala 67:16]
    alu.io.sel <= controlUnit.io.aluSel @[CPUTop.scala 70:14]
    dataMemory.io.writeEnable <= controlUnit.io.dataWrite @[CPUTop.scala 73:29]
    dataMemory.io.dataWrite <= registerFile.io.b @[CPUTop.scala 74:27]
    when controlUnit.io.immediateAddr : @[CPUTop.scala 75:39]
      node _T_8 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 76:62]
      dataMemory.io.address <= _T_8 @[CPUTop.scala 76:27]
      skip @[CPUTop.scala 75:39]
    else : @[CPUTop.scala 77:16]
      dataMemory.io.address <= registerFile.io.a @[CPUTop.scala 78:27]
      skip @[CPUTop.scala 77:16]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 84:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 85:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 86:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 87:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 88:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 90:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 91:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 92:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 93:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 94:35]
    

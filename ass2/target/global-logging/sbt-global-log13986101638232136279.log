[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\William\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\William\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 17.0.1)
[debug]       Load.loadUnit: plugins took 66.4504ms
[debug]       Load.loadUnit: defsScala took 0.243ms
[debug] [Loading] Scanning directory C:\Users\William\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\William\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.004101 ms
[debug]           Load.resolveProject(global-plugins) took 42.3572ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\William\.sbt\1.0\plugins, plugins: List(<none>))) took 85.838099ms
[debug] [Loading] Done in C:\Users\William\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 134.2233ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2443ms
[debug]     Load.loadUnit(file:/C:/Users/William/.sbt/1.0/plugins/, ...) took 210.8184ms
[debug]   Load.apply: load took 338.9111ms
[debug]   Load.apply: resolveProjects took 3.8231ms
[debug]   Load.apply: finalTransforms took 49.718701ms
[debug]   Load.apply: config.delegates took 7.1566ms
[debug]   Load.apply: Def.make(settings)... took 405.066599ms
[debug]   Load.apply: structureIndex took 96.1722ms
[debug]   Load.apply: mkStreams took 1.5223ms
[info] loading global plugins from C:\Users\William\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3890.5858ms
[debug]           Load.loadUnit: plugins took 20.2686ms
[debug]           Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\William\Desktop\codeA2\codeA2\project
[debug]             Load.loadUnit: mkEval took 5.072ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\William\Desktop\codeA2\codeA2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0159 ms
[info] loading settings for project codea2-build from idea.sbt ...
[debug]               Load.resolveProject(codea2-build) took 2.028901ms
[debug]             Load.loadTransitive: finalizeProject(Project(id codea2-build, base: C:\Users\William\Desktop\codeA2\codeA2\project, plugins: List(<none>))) took 3.3678ms
[debug] [Loading] Done in C:\Users\William\Desktop\codeA2\codeA2\project, returning: (codea2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1783.286899ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.717301ms
[debug]         Load.loadUnit(file:/C:/Users/William/Desktop/codeA2/codeA2/project/, ...) took 1809.0617ms
[debug]       Load.apply: load took 1810.2539ms
[debug]       Load.apply: resolveProjects took 0.096001ms
[debug]       Load.apply: finalTransforms took 8.313501ms
[debug]       Load.apply: config.delegates took 0.2281ms
[debug]       Load.apply: Def.make(settings)... took 70.0264ms
[debug]       Load.apply: structureIndex took 24.0088ms
[debug]       Load.apply: mkStreams took 0.003201ms
[info] loading project definition from C:\Users\William\Desktop\codeA2\codeA2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2986.889001ms
[debug]     Load.loadUnit: defsScala took 0.003601ms
[debug] [Loading] Scanning directory C:\Users\William\Desktop\codeA2\codeA2
[debug]       Load.loadUnit: mkEval took 0.2787ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\William\Desktop\codeA2\codeA2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9822 ms
[info] loading settings for project codea2 from build.sbt ...
[debug]         Load.resolveProject(codea2) took 39.3846ms
[debug]       Load.loadTransitive: finalizeProject(Project(id codea2, base: C:\Users\William\Desktop\codeA2\codeA2, plugins: List(<none>))) took 42.475099ms
[debug] [Loading] Done in C:\Users\William\Desktop\codeA2\codeA2, returning: (codea2)
[debug]     Load.loadUnit: loadedProjectsRaw took 1449.015ms
[debug]     Load.loadUnit: cleanEvalClasses took 25.2541ms
[debug]   Load.loadUnit(file:/C:/Users/William/Desktop/codeA2/codeA2/, ...) took 4462.004499ms
[debug] Load.apply: load took 4463.8047ms
[debug] Load.apply: resolveProjects took 0.125901ms
[debug] Load.apply: finalTransforms took 22.516701ms
[debug] Load.apply: config.delegates took 0.3667ms
[debug] Load.apply: Def.make(settings)... took 67.9257ms
[debug] Load.apply: structureIndex took 25.7762ms
[debug] Load.apply: mkStreams took 0.002799ms
[info] set current project to codea2 (in build file:/C:/Users/William/Desktop/codeA2/codeA2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58527 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58527, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to codea2 (in build file:/C:/Users/William/Desktop/codeA2/codeA2/)
[debug] > Exec(idea-shell, None, None)

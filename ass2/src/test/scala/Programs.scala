import chisel3._
import chisel3.util._
import chisel3.iotesters
import chisel3.iotesters.PeekPokeTester
import java.util

object Programs{
  val program1 = Array(
    "b01010000000000010000000000000001".U(32.W), // ASS R1 1;
    "b01010000000000100000000000000001".U(32.W), // ASS R2 1;
    "b00000000000100010010000000000000".U(32.W), // ADD R2 R1 R1;
    "b11111111111111111111111111111111".U(32.W), // END;
  )

  val program2 = Array(
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W)
  )

  val programErosion = Array(
    // Assign vals to Regs
      "h50 00 0000".U(32.W),    // 1    ASS R0, 0;
      "h50 09 0013".U(32.W),    // 2    ASS R9, 19;
      "h50 0A 0014".U(32.W),    // 3    ASS R10, 20;
      "h50 0F 00FF".U(32.W),    // 4    ASS R15, 255;
    // For loop starts
      "h50 01 0000".U(32.W),    // 5    ASS R1, x (0);
      "h8C 19 0051".U(32.W),    // 6    JGT 81, R1 (x), R9 (19);
      "h50 02 0000".U(32.W),    // 7    ASS R2, y (0);
      "h8C 29 004E".U(32.W),    // 8    JGT 78, R2 (y), R9 (19);
    // if (x == 0)
      "h89 10 000B".U(32.W),    // 9    JEQ 11, R1 (x), R0 (0);
      "h8F 00 0010".U(32.W),    // 10   JMP 16;
      "h02 2A 3 000".U(32.W),   // 11   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 12   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 13   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 14   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 15   JMP 77;
    // if (y == 0)
      "h89 20 0012".U(32.W),    // 16   JEQ 18, R2 (y), R0 (0);
      "h8F 00 0017".U(32.W),    // 17   JMP 23;
      "h02 2A 3 000".U(32.W),   // 18   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 19   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 20   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 21   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 22   JMP 77;
    // if (x == 19)
      "h89 19 0019".U(32.W),    // 23   JEQ 25, R1, R9;
      "h8F 00 001E".U(32.W),    // 24   JMP 30;
      "h02 2A 3 000".U(32.W),   // 25   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 26   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 27   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 28   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 29   JMP 77;
    // if (y == 19)
      "h89 29 0020".U(32.W),    // 30   JEQ 32, R1, R9;
      "h8F 00 0025".U(32.W),    // 31   JMP 37;
      "h02 2A 3 000".U(32.W),   // 32   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 33   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 34   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 35   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 29   JMP 77;
    // if (in_image(x,y) == 0)
      "h02 2A 3 000".U(32.W),   // 37   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 38   ADD R3, R1, R3;
      "h10 30 3000".U(32.W),    // 39   LOAD R3, R3;
      "h89 30 002A".U(32.W),    // 40   JEQ 42, R3, R0;
      "h8F 00 002F".U(32.W),    // 41   JMP 47;
    // Black pixel
      "h02 2A 3 000".U(32.W),   // 42   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 43   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 44   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 45   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 46   JMP 77;
    // White pixel
    // if (in_image(x - 1, y) == 0 or ...
      "h02 2A 3 000".U(32.W),   // 47   MULT R3, R2, R10;
      "h41 14 0001".U(32.W),    // 57   SUBI R4, R1, 1;
      "h00 43 3 000".U(32.W),   // 49   ADD R3, R4, R3;
      "h10 30 3000".U(32.W),    // 50   LOAD R3, R3;
      "h89 30 0044".U(32.W),    // 51   JEQ 68, R3, R0;
    // ... in_image(x + 1, y) == 0 or ...
      "h02 2A 3 000".U(32.W),   // 52   MULT R3, R2, R10;
      "h40 14 0001".U(32.W),    // 53   ADDI R4, R1, 1;
      "h00 43 3 000".U(32.W),   // 54   ADD R3, R4, R3;
      "h10 30 3000".U(32.W),    // 55   LOAD R3, R3;
      "h89 30 0044".U(32.W),    // 56   JEQ 68, R3, R0;
    // ... in_image(x, y - 1) == 0 or ...
      "h41 24 0001".U(32.W),    // 57   SUBI R4, R2, 1;
      "h02 4A 3 000".U(32.W),   // 58   MULT R3, R4, R10;
      "h00 13 3 000".U(32.W),   // 59   ADD R3, R1, R3;
      "h10 30 3000".U(32.W),    // 60   LOAD R3, R3;
      "h89 30 0044".U(32.W),    // 61   JEQ 68, R3, R0;
    // ... in_image(x, y + 1) == 0)
      "h40 24 0001".U(32.W),    // 53   ADDI R4, R1, 1;
      "h02 4A 3 000".U(32.W),   // 63   MULT R3, R4, R10;
      "h00 13 3 000".U(32.W),   // 64   ADD R3, R1, R3;
      "h10 30 3000".U(32.W),    // 65   LOAD R3, R3;
      "h89 30 0044".U(32.W),    // 66   JEQ 68, R3, R0;
      "h8F 00 0049".U(32.W),    // 67   JMP 73;
    // Erode
      "h02 2A 3 000".U(32.W),   // 68   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 69   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 70   ADDI R3, R3, 400;
      "h20 30 0000".U(32.W),    // 71   STD R3, R0;
      "h8F 00 004D".U(32.W),    // 72   JMP 77;
    // Do not erode
      "h02 2A 3 000".U(32.W),   // 73   MULT R3, R2, R10;
      "h00 13 3 000".U(32.W),   // 74   ADD R3, R1, R3;
      "h40 33 0190".U(32.W),    // 75   ADDI R3, R3, 400;
      "h20 3F 0000".U(32.W),    // 76   STD R3, R15;
    // For loop ends
      "h03 20 2 000".U(32.W),   // 77   INC R2;
      "h8F 00 0008".U(32.W),    // 78   JMP 8;
      "h03 10 1 000".U(32.W),   // 79   INC R1;
      "h8F 00 0006".U(32.W),    // 80   JMP 6;
      "hFF FF FFFF".U(32.W),    // 81   END;
  )
}